/**
 * @file main.js General methods to load and display show data
 * @author Mihai Peteu 
 * @copyright 2016 Middle of June.  All rights reserved.
 */

/**
 * lookupArtist(event)
 * Old school HTML onclick call generated by Events list
 * Needs to be outside document.ready or it'll throw undefined error
 * @param {array} event Object containing all of the related show info
 */
function lookupArtist(event) {
    // console.log(">>> lookupArtist >>> ");
    // console.log(event);

    // Pop up hidden modal
    $('#artistModal').modal('show');

    // Delay Promise chain until dialog is popped open!
    // Clear existing modal content 
    $('#artist-event').empty();
    $('.modal-title').empty();
    $('#event-tags').empty();

    var showTitle = event.artist;

    // Load artist/show data differently based on source
    switch(event.source) {
        case 'scenestar':
            startEventLookup(event);
            break;
        case 'experiencela':
            showTitle = event.title;
            // 
            // TODO:  break up displayStaticShowInfo into smaller actions 
            // (eg: getArtistPhoto), string them up as part of promise chain
            // 
            Events.displayStaticShowInfo('artist-info', event);
            Events.getShowDetails(event.eventid)
                .then(function(data) {
                    Events.appendShowDetail(data.events[0]);
                });
            break;
        case 'ticketfly':
            showTitle = event.title;
            Events.displayStaticShowInfo('artist-info', event);
            Events.getShowDetails(event.eventid)
                .then(function(data) {
                    Events.appendShowDetail(data.events[0]);
                });
            // Returns $.ajax from Youtube API
            Events.getTopTracks(event.artist)
                .then(function(trackData) {
                   Events.appendTopTracks('artist-tracks', trackData);
                });
            break;
        default:   // fallback case
            startEventLookup(event);
            break;
            // default code 
    }// End switch based on event Source

    // Append venue name + link to modal
    $('#tix-show-title').html(showTitle);
    $('#tix-url').html(
        '<a href="' + event.url + '">' 
        +  '<img src="media/svg/ticket.svg" class="icon-link icon-round border-mid-gray margin-right-10" alt="Get tickets" title="Get tickets"/>'
        +'</a>');
    $('#tix-url-source').html(parseUrlDomain(event.url, "short"));

    // Append Event Tags
    var tags = event.type.split(',');

    // Strip whitespace, format, save to Tags array
    for (var i = 0; i < tags.length; i++) {
        $tag = $('<div>')
            .addClass('event-tag')
            .html($.trim(tags[i]).ucwords());

        $('#event-tags').append($tag);
    }// End event tag loop

    // Create event url share link
    var shareLink = buildSharingLink(event.slug);
    $('#share-link').html(''
        //+'<a href="' + shareLink + '">' 
        //+ '<img src="media/svg/share.svg" class="icon-action h30 w30" alt="Share Link" title="Share Link"/></a>'
        + '<img src="media/svg/share.svg" class="icon-basic" alt="Share Link" title="Share Link"/>'
        + '<input type="text" class="text-input w88p" value="' + shareLink + '">');

    // Modal title (Artist @ venue on date)
    $('.modal-title').html(
        (!isBlank(event.artist) ? event.artist + ' @ ' : '') 
        + event.venue 
        + ' / ' + formatYmdAsShortDate(event.ymd_date).nice_date);

    // Select all text in sharing link input on click or tap
    $('#share-link input:text').focus(function() { 
        // Select all text when on mobile
        $(this)[0].setSelectionRange(0, 9999);
        // Select all on desktop/laptop
        $(this).select(); 
    });
}// End lookupArtist

/**
 * startEventLookup(event)
 * Events / Artist info promise chain
 * @param {array} event Object containing all of the related show info
 */
function startEventLookup(event) {

    // returns $.ajax from Last.fm API
    Events.getArtistInfo(event.artist, 'getinfo')

        // Process results of original Last.fm API call
        .then(function(artistData) {
            // Get artist info wasn't so lucky
            if (artistData.error === 6) {
                console.log(' (+) Get info failed ...');
                return Events.getArtistInfo(event.artist, 'search')
                    .then(function(artistData) {
                        console.log(' (+) Falling back on Search');
                        // Returns artistInfo, even if blank
                        return Events.appendArtistInfo('artist-info', artistData);
                    });
            }// End if getInfo call failed

            // Yay, direct hit on artist name
            else {
                // returns artist name, used in the next .then
                return Events.appendArtistInfo('artist-info', artistData);
            }
        })// End what to do after getArtistInfo

        .then(function(artistName) {      
            // returns $.ajax from Youtube API
            return Events.getTopTracks(artistName);
        })// End what to do after appendArtistInfo

        .then(function(trackData) {
            Events.appendTopTracks('artist-tracks', trackData);
        });
}// End startEventLookup

/**
 * Initialize the Swiper
 * @param {string} Selector of DOM element that will contain the swiper
 */
function swiperInit(swiperSelector) {
    //  Initialize Swiper
    var swiper = new Swiper(swiperSelector, {
        pagination: '.swiper-pagination',
        paginationClickable: false,
        keyboardControl: true,
        lazyLoading: true,
        swipeHandler: '.event-swipe-handle',
        onClick: function () {
            // swiper.slideNext();
        },
        loop: false,

        // Stuff to do upon slider creation
        onInit: function() {
            // Set date display
            Events.updateEventDate();
        },

        // If slide changed, might need to reset some stuff
        // onSlideChangeStart: function() {
        //     console.log('onSlideChangeStart');
        // },

        // When moving slider in either direction
        // onSliderMove: function(swiper, event) {
        //     // console.log('onSliderMove');
        // },

        // On Touch events
        // onTouchStart: function(swiper, event) {
        //     console.log('onTouchStart');
        // },
        
        // // On start of < / > action
        // onSlideNextStart: function() {
        //     console.log('onSlideNextStart');
        // },
        // onSlidePrevStart: function() {
        //     console.log('onSlidePrevStart');
        // },
        
        // Check whether user is attempting to slide at either end
        onTouchEnd: function(swiper, event) {
            var swipeDistance = swiper.touches.diff;
            
            // Arrive at the tail ends of the slider, go either back or forward a day
            if ((swiper.isBeginning || swiper.isEnd) && !Events.anyQuickFiltersAreOn()) {
                var getShowsOptions = {
                    'startDate': UserState.getDisplayedDate(),
                };

                // Set a threshold for swipe "amount"
                var minSwipeDistance = 100;
                
                // If user wants to go back one day
                if (swiper.isBeginning && swipeDistance > minSwipeDistance) {
                    sliderPrevDay();
                }
                // Else if user wants to advance one day
                else if (swiper.isEnd && 
                    swipeDistance < 0 && Math.abs(swipeDistance) > minSwipeDistance) {
                    sliderNextDay();
                }
            }
        }, // onTouchEnd

        // On end of < / > action
        // onSlidePrevEnd: (),
        // onSlideNextEnd: (),

        // End of slide deck
        // onReachEnd: function() {
        //     console.log('(x) onReachEnd / reachedSlideEnd ');
        // },
        // onReachBeginning: function() {
        //     console.log('(x) onReachBeginning / reachedSlideStart ');
        // }, 
    });
    window.EventSlider = swiper;
} // End swiperInit

function showEventSlider(opts) {
   console.log(opts);

    Events.getShows({
            'startDate': opts.startDate,
            'endDate': opts.endDate,    // eg: (+)1 or -1
            'maxResults': opts.maxResults   // Daily limit just to be safe
        })
        // Append shows to DOM, save data to Singleton object(s)
        .then(function(response) { 
            // Check for valid data before continuing
            if (isValidJson(response)) {

                var jsonData = JSON.parse(response);
                if (jsonData.success) {
                    debugger;
                    var events = [];
                    // Rearrange event array keys from abbreviated to readable
                    if (jsonData.timestamp !== 'cached') {
                        events = Events.expandArrayKeys(jsonData.events);
                    }

                    // Save Data to Events singleton
                    Events.setEventData(events);

                    // Append shows to DOM
                    Events.displayShowsInSlider(Events.getEventData()); 

                    // Set loaded flag
                    $('#swiper-parent').data('loaded', 'true');         
                }
            } // End if valid json
        })
        .then(function() {
            // Parse url for hashtag slug (arrived via sharing link) 
            var request = parseUrlAction();
        })
        // Initialize swipe actions, set click listeners
        .then(function() {
            // Initialize Swiper if the first time on page
            if (typeof window.EventSlider != 'object') {
                swiperInit('.swiper-container');
            }
            // Otherwise, just update content
            else {
                window.EventSlider.update();
                window.EventSlider.updateSlidesSize();
                window.EventSlider.updateProgress()
                window.EventSlider.updatePagination();
                window.EventSlider.detachEvents()
                window.EventSlider.attachEvents();
                window.EventSlider.slideTo(0);                
            }

            // Popup show details on click 
            Events.addShowDetailClickListener();

            Events.addQuickFilters();

            // Update display date
            Events.updateEventDate();

        }); // Initialize swipe actions, set click listeners
} // End function showEventSlider

function showEventCalendar() {
    $('#action-calendarView').data('mode', 'calendar');

    // How many days ahead to grab
    Events.getEvents(60)
        // Return events $.ajax request
        .then(function(data) {

            // Parse the data into JSON object
            var eventData = JSON.parse(data);

            debugger;

            // Check for valid data before continuing
            if (eventData.success) {
                var events = eventData.events;

                // Rearrange event array keys from abbreviated to readable
                if (eventData.timestamp !== 'cached') {
                    events = Events.expandArrayKeys(eventData.events);
                }

                // TODO: Save event data to local storage
                //mojUserState.events = 
                Events.setEventData(events);


                // Toggle data attribute of calendar parent
                $("#" + CALENDAR_DIV).data('loaded', 'true');

                // JSON data will go into present calendar div
                Events.displayEventsInCalendar(Events.getEventData(), CALENDAR_DIV);
            }
            else {
                if (typeof (events === 'undefined') || !events.length) {
                    return Error("getEvents - did not receive any data ='(");
                }
                else {
                    return Error("getEvents - event data received, but success flag is not set");
                }
            }// End else        
            
        })// End events.getEvents().then
        // Once data is loaded, parse URL for a direct link (after the #)
        .then(function() {
            var request = parseUrlAction();
        })
}


/**
 * Slider advancement functions
 */
function sliderToday() {
    showEventSlider({
        'startDate': UserState.getDisplayedDate(),
        'endDate': getDayByOffset(UserState.getDisplayedDate(), 1),
    });
}
function sliderNextDay() {
    // Get next day's shows
    showEventSlider({
        'startDate': getDayByOffset(UserState.getDisplayedDate(), 1),
        'endDate': getDayByOffset(UserState.getDisplayedDate(), 2),
    });
}
function sliderPrevDay() {
    // Get previous day's show data
    showEventSlider({
        'startDate': getDayByOffset(UserState.getDisplayedDate(), -1),
        'endDate': UserState.getDisplayedDate(),
    });
}
